// Code generated by github.com/nightmarlin/pokeapi/cmd/gettergen@v0"; DO NOT EDIT.

package pokeapi

import "context"

const AbilityResource Resource = "ability"

func (c *Client) GetAbility(ctx context.Context, ident string) (*Ability, error) {
	return do[*Ability](ctx, c, c.getURL(AbilityResource, ident), nil)
}
func (c *Client) ListAbilities(ctx context.Context, opts *ListOptions) (*Page[NamedAPIResource[Ability], Ability], error) {
	return do[*Page[NamedAPIResource[Ability], Ability]](ctx, c, c.listURL(AbilityResource), opts.urlValues())
}

const CharacteristicResource Resource = "characteristic"

// GetCharacteristic only accepts the ID of the desired Characteristic.
func (c *Client) GetCharacteristic(ctx context.Context, id string) (*Characteristic, error) {
	return do[*Characteristic](ctx, c, c.getURL(CharacteristicResource, id), nil)
}
func (c *Client) ListCharacteristics(ctx context.Context, opts *ListOptions) (*Page[APIResource[Characteristic], Characteristic], error) {
	return do[*Page[APIResource[Characteristic], Characteristic]](ctx, c, c.listURL(CharacteristicResource), opts.urlValues())
}

const EggGroupResource Resource = "egg-group"

func (c *Client) GetEggGroup(ctx context.Context, ident string) (*EggGroup, error) {
	return do[*EggGroup](ctx, c, c.getURL(EggGroupResource, ident), nil)
}
func (c *Client) ListEggGroups(ctx context.Context, opts *ListOptions) (*Page[NamedAPIResource[EggGroup], EggGroup], error) {
	return do[*Page[NamedAPIResource[EggGroup], EggGroup]](ctx, c, c.listURL(EggGroupResource), opts.urlValues())
}

const GenderResource Resource = "gender"

func (c *Client) GetGender(ctx context.Context, ident string) (*Gender, error) {
	return do[*Gender](ctx, c, c.getURL(GenderResource, ident), nil)
}
func (c *Client) ListGenders(ctx context.Context, opts *ListOptions) (*Page[NamedAPIResource[Gender], Gender], error) {
	return do[*Page[NamedAPIResource[Gender], Gender]](ctx, c, c.listURL(GenderResource), opts.urlValues())
}

const GrowthRateResource Resource = "growth-rate"

func (c *Client) GetGrowthRate(ctx context.Context, ident string) (*GrowthRate, error) {
	return do[*GrowthRate](ctx, c, c.getURL(GrowthRateResource, ident), nil)
}
func (c *Client) ListGrowthRates(ctx context.Context, opts *ListOptions) (*Page[NamedAPIResource[GrowthRate], GrowthRate], error) {
	return do[*Page[NamedAPIResource[GrowthRate], GrowthRate]](ctx, c, c.listURL(GrowthRateResource), opts.urlValues())
}

const NatureResource Resource = "nature"

func (c *Client) GetNature(ctx context.Context, ident string) (*Nature, error) {
	return do[*Nature](ctx, c, c.getURL(NatureResource, ident), nil)
}
func (c *Client) ListNatures(ctx context.Context, opts *ListOptions) (*Page[NamedAPIResource[Nature], Nature], error) {
	return do[*Page[NamedAPIResource[Nature], Nature]](ctx, c, c.listURL(NatureResource), opts.urlValues())
}

const PokeathlonStatResource Resource = "pokeathlon-stat"

func (c *Client) GetPokeathlonStat(ctx context.Context, ident string) (*PokeathlonStat, error) {
	return do[*PokeathlonStat](ctx, c, c.getURL(PokeathlonStatResource, ident), nil)
}
func (c *Client) ListPokeathlonStats(ctx context.Context, opts *ListOptions) (*Page[NamedAPIResource[PokeathlonStat], PokeathlonStat], error) {
	return do[*Page[NamedAPIResource[PokeathlonStat], PokeathlonStat]](ctx, c, c.listURL(PokeathlonStatResource), opts.urlValues())
}

const PokemonResource Resource = "pokemon"

func (c *Client) GetPokemon(ctx context.Context, ident string) (*Pokemon, error) {
	return do[*Pokemon](ctx, c, c.getURL(PokemonResource, ident), nil)
}
func (c *Client) ListPokemons(ctx context.Context, opts *ListOptions) (*Page[NamedAPIResource[Pokemon], Pokemon], error) {
	return do[*Page[NamedAPIResource[Pokemon], Pokemon]](ctx, c, c.listURL(PokemonResource), opts.urlValues())
}

const PokemonColorResource Resource = "pokemon-color"

func (c *Client) GetPokemonColor(ctx context.Context, ident string) (*PokemonColor, error) {
	return do[*PokemonColor](ctx, c, c.getURL(PokemonColorResource, ident), nil)
}
func (c *Client) ListPokemonColors(ctx context.Context, opts *ListOptions) (*Page[NamedAPIResource[PokemonColor], PokemonColor], error) {
	return do[*Page[NamedAPIResource[PokemonColor], PokemonColor]](ctx, c, c.listURL(PokemonColorResource), opts.urlValues())
}

const PokemonFormResource Resource = "pokemon-form"

func (c *Client) GetPokemonForm(ctx context.Context, ident string) (*PokemonForm, error) {
	return do[*PokemonForm](ctx, c, c.getURL(PokemonFormResource, ident), nil)
}
func (c *Client) ListPokemonForms(ctx context.Context, opts *ListOptions) (*Page[NamedAPIResource[PokemonForm], PokemonForm], error) {
	return do[*Page[NamedAPIResource[PokemonForm], PokemonForm]](ctx, c, c.listURL(PokemonFormResource), opts.urlValues())
}

const PokemonHabitatResource Resource = "pokemon-habitat"

func (c *Client) GetPokemonHabitat(ctx context.Context, ident string) (*PokemonHabitat, error) {
	return do[*PokemonHabitat](ctx, c, c.getURL(PokemonHabitatResource, ident), nil)
}
func (c *Client) ListPokemonHabitats(ctx context.Context, opts *ListOptions) (*Page[NamedAPIResource[PokemonHabitat], PokemonHabitat], error) {
	return do[*Page[NamedAPIResource[PokemonHabitat], PokemonHabitat]](ctx, c, c.listURL(PokemonHabitatResource), opts.urlValues())
}

const PokemonShapeResource Resource = "pokemon-shape"

func (c *Client) GetPokemonShape(ctx context.Context, ident string) (*PokemonShape, error) {
	return do[*PokemonShape](ctx, c, c.getURL(PokemonShapeResource, ident), nil)
}
func (c *Client) ListPokemonShapes(ctx context.Context, opts *ListOptions) (*Page[NamedAPIResource[PokemonShape], PokemonShape], error) {
	return do[*Page[NamedAPIResource[PokemonShape], PokemonShape]](ctx, c, c.listURL(PokemonShapeResource), opts.urlValues())
}

const PokemonSpeciesResource Resource = "pokemon-species"

func (c *Client) GetPokemonSpecies(ctx context.Context, ident string) (*PokemonSpecies, error) {
	return do[*PokemonSpecies](ctx, c, c.getURL(PokemonSpeciesResource, ident), nil)
}
func (c *Client) ListPokemonSpecieses(ctx context.Context, opts *ListOptions) (*Page[NamedAPIResource[PokemonSpecies], PokemonSpecies], error) {
	return do[*Page[NamedAPIResource[PokemonSpecies], PokemonSpecies]](ctx, c, c.listURL(PokemonSpeciesResource), opts.urlValues())
}

const StatResource Resource = "stat"

func (c *Client) GetStat(ctx context.Context, ident string) (*Stat, error) {
	return do[*Stat](ctx, c, c.getURL(StatResource, ident), nil)
}
func (c *Client) ListStats(ctx context.Context, opts *ListOptions) (*Page[NamedAPIResource[Stat], Stat], error) {
	return do[*Page[NamedAPIResource[Stat], Stat]](ctx, c, c.listURL(StatResource), opts.urlValues())
}

const TypeResource Resource = "type"

func (c *Client) GetType(ctx context.Context, ident string) (*Type, error) {
	return do[*Type](ctx, c, c.getURL(TypeResource, ident), nil)
}
func (c *Client) ListTypes(ctx context.Context, opts *ListOptions) (*Page[NamedAPIResource[Type], Type], error) {
	return do[*Page[NamedAPIResource[Type], Type]](ctx, c, c.listURL(TypeResource), opts.urlValues())
}
